name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/bind-dns-gui

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: get_version
        run: |
          # Remove 'v' prefix from tag (v1.0.0 -> 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/bind-dns-gui
          short-description: "Modern web-based GUI for managing ISC BIND DNS zones"
          readme-filepath: ./README.md
        continue-on-error: true

      - name: Check if release exists
        id: check_release
        run: |
          # Check if a release already exists for this tag
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release already exists for ${{ github.ref_name }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No release found for ${{ github.ref_name }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          body: |
            ## Docker Image
            
            Pull the Docker image:
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.version }}
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            ```
            
            Run the container:
            ```bash
            docker run -d -p 5000:5000 \
              -e BIND_HOST=your-bind-server \
              -e BIND_USER=your-ssh-user \
              -e BIND_SSH_KEY=/path/to/ssh/key \
              -e DNS_ZONE=your-domain.com \
              -e ZONE_FILE_PATH=/etc/bind/zones/db.your-domain.com \
              ${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.version }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.build-and-push.result == 'success'
        run: |
          echo "‚úÖ Docker image successfully built and pushed!"
          echo "üê≥ Image: ${{ env.DOCKER_IMAGE }}:latest"
          echo "üì¶ Version: ${{ github.ref_name }}"
      
      - name: Notify failure
        if: needs.build-and-push.result == 'failure'
        run: |
          echo "‚ùå Docker build failed!"
          exit 1

